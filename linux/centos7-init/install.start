#!/bin/bash

#安装ifconfig
function install_ifconfig {
 if ! command -v ifconfig &> /dev/null; then
  echo "ifconfig 命令不存在，是否准备安装 ifconfig...（输入n不安装）"
	read key
  	if [ ! "n" = "$key" ];then 
  	  yum -y install net-tools.x86_64
  	  echo "ifconfig 安装成功"
  	else
  	  echo "ifconfig 安装失败"
  	fi
 else 
    echo "ifconfig命令已存在"
 fi
}

#安装vim
function install_vim {
if ! command -v vim &> /dev/null; then
  echo "vim 命令不存在，是否准备安装 vim...（输入n不安装）"
    read key
  	if [ ! "n" = "$key" ];then 
      	yum -y install vim
      	echo "vim 安装成功"
    	else
        echo "vim 安装失败"
  	fi
 else 
    echo "vim命令已存在"
 fi
}

#安装wget
function install_wget {
if ! command -v wget &> /dev/null; then
  echo "wget 命令不存在，是否准备安装 wget...（输入n不安装）"
    read key
 	  if [ ! "n" = "$key" ];then 
      	yum -y install wget
      	echo "wget 安装成功"
    	else
        echo "wget 安装失败"
  	fi
  else 
    echo "wget命令已存在"
 fi
}

#安装docker
function install_docker {
 if ! command -v docker &> /dev/null; then
    echo "docker 命令不存在，是否准备安装 docker...（输入n不安装）"
		read key
		if [ ! "n" = "$key" ];then 		
			#1.环境
			yum -y install gcc
			yum -y install gcc-c++
			#2.卸载旧版本
			yum remove docker \ docker-client \ docker-client-latest \ docker-common \ docker-latest \ dock-latest-logrotate \ docker-logrotate \ docker-selinux \ docker-engine-selinux \ docker-engine
			#3.安装依赖包
			yum install -y yum-utils device-mapper-persistent-data lvm2
			#4.设置stable镜像仓库
			yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
			#5.更新yum软件包索引
			yum makecache fast
			#6.安装最新docker
			yum -y install docker-ce
			#7.启动docker
			systemctl enable docker   #开机自启
			systemctl start docker					
			echo "docker 安装成功"		
		else
			echo "docker 安装失败"
		fi
 else 
    echo "docker命令已存在"
 fi
}


#安装git
function install_git {
if ! command -v git &> /dev/null; then
  echo "git 命令不存在，是否准备安装 git...（输入n不安装）"
    read key
 	if [ ! "n" = "$key" ];then 
        yum -y install git
      	git config --global credential.helper store #用户密码自动保存
		echo "git 安装成功"
      	echo "是否拉取远程配置脚本...（输入n不拉取）"
			read ispull
			if [ ! "n" = "$ispull" ];then
				#Git项目下载部分文件或文件夹 --开头
				#1.创建文件夹并初始化git
				mkdir -p ./git-config
				cd ./git-config
				git init 
				#2.连接要下载的库的地址
				git remote add -f origin https://gitee.com/bg-stray/KY.git
				#3.启用过滤功能
				git config core.sparsecheckout true
				#4.将install-all这个关键字加入过滤列表（要加/*），如果有其他关键字可以多次运行该命令，关键字是文件夹或文件皆可
				echo linux/centos7-init/* >> .git/info/sparse-checkout
				#5.拉取代码
				git pull origin master
				#6.给与 权限
				chmod u+x linux/centos7-init/*
				#Git项目下载部分文件或文件夹 --结尾
				echo "远程配置脚本拉取成功！位置 ./git-config/linux/install-all.sh"	
				cd ..				
			fi      	      
    else
        echo "git 安装失败"
  	fi
else 
    echo "git命令已存在"
	cd ./git-config
	git checkout -- * #git 未commit文件 回退
	git clean -f -d -x #Git删除未跟踪的文件 -f强行删除文件 -d考虑未跟踪的目录以及未跟踪的文件 -x还要考虑被忽略的未跟踪文件.gitignore
	git pull origin master
	cd ..
fi
}




#######执行程序（本地使用）#######
install_git

echo "是否执行远程脚本...（输入n不执行）"
read doInstallAll

if [ ! "n" = "$doInstallAll" ];then
	cd ./git-config/linux/centos7-init
	for file in $(ls ./*.sh);
	do 
		echo "${file}"
		chmod u+x $file
		$file
	done
else
	echo "本地配置脚本安装"
	install_ifconfig
	install_vim
	install_wget
	install_docker
fi

#######执行程序（远程使用）#######